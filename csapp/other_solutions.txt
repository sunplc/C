
Solutions to Problem:

2.18:
32-bit Two's complement
0x1b8		00000001 10101000 1*2^8 + 11*2^4 + 8 = 256 + 176 + 8 = 440
0x14		1*2^4 + 4 = 20
0xfffffe58	-0x1a8 = -256 + -160 + -8 = -424
0xfffffe74 	-0x18c = -256 + -128 + -12 = -396
0x44		4*16 + 4 = 68
0xfffffec8	-0x138 = -256 + -48 + -8 = -312
0x10		16
0xc 		12
0xfffffeec	-0x114 = -256 + -16 + -4 = -276
0x20		32

2.19:
-8	1000	8
-3	1101	13
-2	1110	14
-1	1111	15
0	0000	0
5	0101	5

2.21:
unsigned	1
int 		1
unsigned	0
int 		1
unsigned	0

2.23:
fun1(w)			fun2(2)
00000076		00000076
00000021		00000021
000000c9		ffffffc9
00000087		ffffff87

fun1() performs logical left shift for 3 bytes and logical right shift for 3 bytes.

fun2() performs type cast from unsigned to int, performs logical left shift for 3 bytes and arithmetical right shift for 3 bytes.

2.24:
0	0
2	2
1	-7->9->1
3	-5->11->3
7	-1->15->7

2.25:
for variable "length" have data type unsigned, subtract "length" with 1, cause a overflow, make the "length" equals 0xFFFFFFFF, that is 4294967295 in decimal.

2.72:
A: 
when operate with an unsigned and an int, the C compiler
will see the result as an unsigned type.

B:
if (maxbytes - (int)sizeof(val) >= 0)

2.76:
A: (x << 4) + x
B: -(x << 3) + x
C: (x << 6) - (x << 2)
D: -(x << 7) + (x << 4)

3.1:
0x100
0xAB
0x108
0xFF
0xAB
0x11
0x13
0xFF
0x11

3.2:
1 movl %eax, (%esp)
2 movw (%eax), %dx
3 movb $0xFF, %bl
4 movb (%esp,%edx,4), %dh
5 pushb $0xFF
6 movw %dx, (%eax)
7 popl %edi

3.3:
1 movb $0xF, (%bl)		# %bl can not be pointer, too short
2 movl %ax, (%esp) 		# should use movw
3 movw (%eax),4(%esp)	# two oprands can not be two address
4 movb %ah,%sh			# no register named %sh
5 movl %eax,$0x123		# can not mov the value of %eax to an Immediate value
6 movl %eax,%dx			# should use movw
7 movb %si, 8(%ebp)		# should use movw

3.4:
movsbl %al (%edx)
movsbl %al (%edx)
movzbl %al (%edx)
movb %al (%edx)
movb %al (%edx)
movl %eax (%edx)

3.5:
void decode1(int *xp, int *yp, int *zp)
{
    int b = *yp
    int s = *zp
    int a = *xp

    *yp = a;
    *zp = b;
    *xp = s;
}


3.6:
x+6
x+y
x+(y*4)
7+ 9y
(y*4)+10
x+(y*2)+9

3.7:
0x100   0x100
0x104   0xA8
0x10c   0x110
0x108   0x14
%ecx    0x0
%eax    0xFD

3.8:
sall $2, %eax 
sarl %cl, %eax

3.9:
t1 = x ^ y;
t2 = t1 >> 3;
t3 = ~t2;
t4 = t3 - z;

3.10:
A: set all bit of register as zero
B: movl $0, %edx
C: XOR use only one register, that is 4 bytes; MOV use one register and one word
in memory, totally use 8 bytes;

3.11:
movl 8(%ebp), %eax  // Put x to %eax
xorl %edx, %edx     // Set %edx to 0
divl 12(%ebp)       // Divide by y
movl %eax, 4(%esp)  // Store x / y
movl %edx, (%esp)   // Store x % y

3.12:
The data type of num_t is:
struct {
    int a, 
    int b
}

algorithm:
function test(dest, x, y) {
    b = x * b;
    long la = x * a;
    long lb = b;
    lb = lb << 32;
    la = la + lb;
    return la;
}


3.13:
int     a < b
short   a >= b
unsigned char  a < b
int a != b

3.14:
int     a != 0
short   a == 0
char    a > 0
unsigned short  a > 0

3.15:
A: 8048291 + 05 = 8048296
B: 8048359 + e7 = 8048440
C: 8048391 - 12 = 804837f
D: Two's complement form ffffffe0 is decimal number 32,  80482c4 + 32 = 80482f6
E: ff 25 fc 9f 04 08, 0xff25 is the instruction jmp*, 0x8049ffc is the memory address which stored the jump target address

3.16:
A:
void cond(int a, int *p) {
    if (p == 0)
        goto done;

    if (a <= 0)
        goto done;

    *p += a;

    done:
}

B: Because of C code's conditional statement has two child statment with AND
logical condition, it is two condition

3.17:
A:
gotodiff(int x, int y) {
    int result;
    if (x < y)
        goto true;
    result = x - y;
    goto done;
true:
    result = y - x;
done:
    return result;
}

B:
The reason is Less operation , less instruction, less time, such as if (!test-expr) is one
more operation than if (test-expr).

3.18:

int test(int x, int y) {
    int val = x * y;
    if (x >= -3) {
        if (x > 2) {
            val = y - x;
        } else {
            val = y ^ x;
        }
    } else if (x <= y)
        val = x + y;
    return val;
}

3.20:

int dw_loop(int x, int y, int n) {
    do {
        x += n;             // body-statement start
        y *= n;
        n--;                // body-statement end
    } while ((n > 0) && (y < n));   // test-expr
    
    return x;
}


// x at %ebp+8, y at %ebp+12, n at %ebp+16
    movl 8(%ebp), %eax      // Put argument value to register
    movl 12(%ebp), %ecx
    movl 16(%ebp), %edx
.L2:
    addl %edx, %eax         // body-statement start, x += n
    imull %edx, %ecx        // y *= n
    subl $1, %edx           // body-statement end, ++n
    testl %edx, %edx        // test-expr, check whether n <= 0
    jle .L5
    cmpl %edx, %ecx         // test-expr, check whether y < n
    jl .L2
.L5
            // return x

A:
Register        Variable        Initally
%eax            x               Argument value
%ecx            y               Argument value
%edx            n               Argument value

3.21:

int loop_while(int a, int b) {
    int c = a + b;
    int result = 1;

    while (a < b) {
        result *= c;   
        ++a;
        ++c;
    }

    return result;
}
}

3.22:

int fun_a(unsigned x) {
    int val = 0;
    while(x) {
        val ^= x;
        x >>= 1;
    }
    return val & 1;
}

将x的最低位从低到高依次与每一个位做异或运算，直到最高的有效位,
返回最终的运算结果

3.23:

A:

int fun_b(unsigned x) {
    int val = 0;
    int i;
    for (i = 0; i != 32; i++) {
        val = (val <<= 1) | (x & 1)
        x >>= 1;
    }
    return val;
}

B:

This function reverse x's bits, transform lower bits to higher bits.


3.25:

A: (31 - 16) * 2 = 30
B: (16 + 30) = 46


从switch语句这一节，开始看 CSAPP-3e


3.30:
A: The value of case lable is the address of block that start with case label.
B: .L2 .L5 and .L7

3.31:
void switcher(long a, long b, long c, long *dest)
{
    long val;
    switch(a) {
    case 5: /* Case A */
        c = a ^ 15;
        /* Fall through */

    case 0: /* Case B */
        val = c + 112;
        break;

    case 7: /* Case C */
    case 2: /* Case D */
        val = (a + c) * 4;
        break;

    case 4: /* Case E */
        val = b;
        break;

    default:
        val = a;
    }
    *dest = val;
}


3.33:
(int a, char b, long *u, char *v)

3.34:
A: a0 ~ a6
B: a7, a8
C: Because there are only six callee-saved registers, and 
    the number of local values may exceed six.

3.35:


A: the value of parameter x

B:
long rfun(unsigned long x) {
    if (x = 0)
        return 0;
    unsigned long nx = x / 4;
    long rx = rfun(nx);
    return x + rx;
}

3.36:
Array   Element size    Total size  Start address   Element i
P       4               20          XP              Xp + 4 * i
Q       2               4           XQ              Xq + 2 * i
R       8               72          XR              Xr + 8 * i
S       8               80          XS              Xs + 8 * i
T       8               16          Xt              XT + 8 * i

3.37:
address of P in rdx, value of i in rcx.

Expression  Type        Value                   Assembly code
P[1]        short       M[Xp + 2i]              movw (%rdx, %rcx, 2), %ax
P + 3 + i   short *     Xp + 6 + 2i             leaq 6(%rdx, %rcx, 2), %rax
P[i*6 - 5]  short       M[Xp + 12i - 10]        movw -10(%rdx, %rcx, 12), %ax
P[2]        short       M[Xp + 4]               movw 4(%rdx), %ax
&P[i + 2]   short *     Xp + 2i + 4             leaq 4(%rdx, %rcx, 2), %rax

3.38:
From the assembly code, we can get follow result:
P[i][j] = XP + 8 * (7i + j)
Q[j][i] = XQ + 8 * (5j + i)

And because of 
P[i][j] = XP + 8 * (i*M + j)
Q[j][i] = XQ + 8 * (j*N + i)

So we get:
M is 7, and N is 5.

3.39:
From question, we have:
C = R = N = 16

Aptr = &A[i][0] = XA + 4(C*i + 0) = XA + 64i
Bptr = &B[0][k] = XB + 4(C*0 + k) = XB + 4k
Bend = &B[N][K] = XB + 4(C*N + k) = XB + 4*16*16 + 4*k = XB + 1024 + 4k

3.40:
solution in 3.40.c file.

3.41:
A: 
P       0
s.x     8
s.y     10
next    12

B:
20

C:
void st_init(struct test *st) {
    st->s.y = st->s.x;
    st->p   = &(st->s.y)
    st->next= st
}

3.42:
A:
short test(struct ACE *ptr) {
    short i = 1;

    do {
        i *= ptr->v;
        ptr = ptr->p;
    } while (ptr);

    return i;
}

B:
ACE has a short intger 'v' and a pointer 'p' which pointed to
another ACE.
function test compute the product of ACE's v and check the ACE's
pointer p, if p not NULL, go to next ACE and compute the product,
and so on.


3.43:
expr        type    Code
up->t1.v    short   movw 8(%rdi), %ax
                    movw %ax, (%rsi)

&up->t1.w   char*   leaq 10(%rdi), %rax
                    movq %rax, (%rsi)

up->t2.a    array   leaq 12(%rdi), %rax
                    movq %rax, (%rsi)

up->t2.a[up->t1.u]    int   
                    movq (%rdi), %rcx
                    movl 12(%rdi, %rcx, 4), %eax
                    movl %rax, (%rsi)

*up->t2.p   char    movq 20(%rdi), %rax
                    movb (%rax), %cl
                    movb %cl, (%rsi)

3.44:
A: offset: 0, 4, 8, 16; total size: 24; 
start address of structure is multiply of 8

B: offset: 0, 8, 16, 24; total size: 32; 
start address of structure is multiply of 8

C: offset: 0, 8; total size 24;
start address of structure is multiply of 8

D: offset: 0, 16; total size 32;
start address of structure is multiply of 8

E: offset: 0, 64; total size 88;
start address of structure is multiply of 8

3.45:
struct {
    int *a;
    float b;
    char c;
    short d;
    long e;
    double f;
    int g;
    char *h;
} rec

A: offset: 0, 8, 12, 14, 16, 24, 32, 40
B: total size is 48 bytes
C: 
struct {
    int *a;
    long e;
    double f;
    char *h;
    float b;
    int g;
    short d;
    char c;
} rec
offset: 0, 8, 16, 24, 32, 36, 40, 42; total size is 48;

3.46:
A:
0x00 00 00 00 00 40 00 76   Return address
0x01 23 45 67 89 AB CD EF   Value of rbx
                            Not initialed space
                            Not initialed space, the place where %rsp point to 
B:
Input String is : 0123456789012345678901234,
And the ASCII codes for characters 0–9 are 0x30–0x39.

0x00 00 00 00 00 40 00 34   Return address
0x33 32 31 30 39 38 37 36   Value of rbx
0x35 34 33 32 31 30 39 38 
0x37 36 35 34 33 32 31 30
0x00 00 00 00 00 40 07 33   Return address of function gets()

C:
0x400768 + 5 = 0x400733

D:
%rbx %rip

E:
1. strlen(buf) should be sizeof(buf)
2. strcpy(result, buf) should by strncpy(result, buf, 4)

3.47:
A: 0xffffd754 - 0xffffb754 == 0x200, that is 512 in decimal.

B: 512 / 128 == 4, four times attempt would take


3.48:
A:
Without protector version:
buf in %rsp
v in %rsp + 24

With protector version:
buf in %rsp + 16
v in %rsp + 8
canary value in %rsp + 40

B:
After rearrange order, canary value is just behind buffer 'buf',
that can provent buffer overrun corrupt any other things,
like 'v'.

3.49:
A: 
%rax = (8 * n + 22);
%rax = %rax - %rax % 16;
s2 = %rsp - %rax;

the value of allocate space is minimium 16, and is multiply of 16,
accordding to the amount of n;

B:
%rax = %rsp + 7;
%rax = %rax / 8;
p = %rax * 8;

make the address of array p incremented to an address of multiply of 8

C:
n   s1      s2      p       e1      e2
5   2065    2017    2024    1       7
6   2064    2000    2000    16      0

D:
s2 is %rsp subtract allocate spaces which is multiply of 16 and minimium is 16,
p is the address of array p, is multiply of 8. alignmented data


3.50:
val1 => d
val2 => i
val3 => l
val4 => f

3.51:
long    double  vcvtsi2sdq  %rdi, %xmm0, %xmm0
double  int     vcvttsd2si  %xmm0, %eax
double  float   vmovddup    %xmm0, %xmm0
                vcvtpd2psx  %xmm0, %xmm0
long    float   vcvtsi2ssq  %rdi, %xmm0, %xmm0
float   long    vcvttss2siq %xmm0, %rdi

3.52:
A: %xmm0, %rdi, %xmm1, %esi
B: %edi, %rsi, %rdx, %rcx
C: %rdi, %xmm0, %esi, %xmm1
D: %xmm0, %rdi, %xmm1, %xmm2

3.53:
%xmm0   => single float                 =>  float r
%xmm1   => double                       =>  double s
%edi    => int to single float          =>  int p
%rsi    => long int to single float     =>  long q

double funct1(int p, long q, float r, double s);
double funct1(int p, float q, long r, double s);

3.54:
double funct2(double w, int x, float y, long z) {
    return x * y - w / z;
}

3.55:
.LC3's lower order bytes is 0 (0x0), 
higher order bytes is 1077936128 (0x40400000),
so we get 0x4040000000000000. 

Represent in binary is :
0b01000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000

exp = 01000000 0000  (1024)
frac = 1
since bias = 1023, so exponent = 1028 - 1023 = 5
1.0 * 2^5 => 32

3.56:
不会做

3.65:
A: %rdx
B: %rax
C: M = 120/8 = 15

3.66:
if 3n <= 0
    return 0

r8 =  8(4*n + 1)
rcx = A + 8*j
rax = rdx = 0

while (rdx != 3*n) {
    rax += (rcx)
    rdx += 1
    rcx += r8
}
return rax

#define NR 3 *
#define NC 1 + 4 *

3.67:
A:
E:

Address:     Content:
%rsp+104     |  |
%rsp+96      |  |
%rsp+88      |  |
%rsp+80      | r.q |
%rsp+72      | r.u[1] |
%rsp+64      | r.u[0] |
%rsp+48      |  |
%rsp+40      |  |
%rsp+32      |  |
%rsp+24      | z |
%rsp+16      | &z |
%rsp+8       | y |
%rsp         | x |

B:
64(%rsp) in %rdi
structure {x, y, &z} at the beginning of %rsp

C:
function process will execute 'push %rbp',
and then argument s is at the %rsp+8

D:
the address of result is in %rdi,
funtion process set the values to structure at %rdi

F:
arguments is store in stack space, and return result is passed by pointer
which stored in register, allocated by caller.

3.68:
8
32
184

from q->t at %rsi+8, we get:
4 < B <=8
from q->u at %rsi+32, we get:
12 < 2*A <= 20
that is:
6 < A <= 10

from p->y at %rdi+184, So we can get:
4*A*B = 184
that is:
A*B = 48

So, we get:
B is 6, A is 8

3.70:
A:
e1.p    0
e1.y    8
e2.x    0
e2.next 8

B:
16 bytes

C:
void proc(union ele *up) {
    up->x = *(up->e2.next->e1.p) - up->e2.next->e1.y;
}

使用 gcc -S -O1 3.70.c 得到 3.70.s 来验证

3.72:
A: 
s2 = %rsp - ( (30 + 8*n) / 16 * 16 )

B:
p = (%rsp + 15) / 16 * 16

C:
s2 = s1 + (30 + 8*n) / 16 * 16

n   allocated space     s1 % 16   e1    e2
1   32                  1         8     15
2   32                  1         0     15
1   32                  0         24    0
2   32                  0         16    0

so when s1 % 16 equal2 1 and n is even number, e1 have minimum value is 0,
and when s1 % 16 equals 0 and n is odd number, e1 have maximum value is 24.

D:
make sure s2 - s1 minimal 32 bytes, and have at least 15 bytes free space for
alignment

make sure the address of p is the multiply of 16

3.75:
A:
first argument in %xmm0 and %xmm1, second argument in %xmm2 and %xmm3, and so on
B:
return value in %xmm0 and %xmm1

Chapter 4:

4.1:


Chapter 4:

4.1:
.pos 0x100                  # Start code at address 0x100
    irmovq $15,%rbx         # 10 bytes long     # 30 f3 0f00000000000000
    rrmovq %rbx,%rcx        # 2 bytes long.     # 20 31
loop:   # address 0x10c
    rmmovq %rcx,-3(%rbx)    # 10 bytes long.    # 40 13 fdffffffffffffff
    addq %rbx,%rcx          # 2 bytes long.     # 60 31
    jmp loop                # 9 bytes long.     # 70 0c01000000000000

4.2:
A. 0x100: 30f3fcffffffffffffff 40630008000000000000
    irmovq $-4, %rbx
    rmmovq %rsi, 0x800(%rbx)

B. 0x200: a06f 800c02000000000000 00 30f30a00000000000000
    push %rsi
    call proc
    halt
.proc:
    irmovq $10, %rbx

C. 0x300: 50540700000000000000 10 f0 b01f
    mrmovq 7(%rsp), %rbp
    nop
    invalid instruction
    popq %rcx

D. 0x400: 6113 730004000000000000 00
.loop:
    subq %rcx, %rbx
    je loop
    halt

E. 0x500: 6362 a0f0
    xorq %rsi, %rdx
    pushq (invalid instruction)


4.3:
# Y86-64 code
# long sum(long *start, long count)
# start in %rdi, count in %rsi

sum:
    irmovq $1,%r9
    xorq %rax,%rax
    andq %rsi,%rsi 
    jmp test
loop
    mrmovq (%rdi),%r10
    addq %r10,%rax 
    iaddq $1,%rdi
    subq %r9,%rsi
test:
    jne
    ret 

4.7:
push %rsp will first push the value of %rsp to stack,
and then decrement %rsp.

4.8:
pop %rsp will first decrement the %rsp, and then pop
the value of the original address.

mrmovq (%rsp), %rsp

4.9:
bool xor = !(a && b) && (a || b)


4.10:
a0 xor b0   =>  x0
a1 xor b1   =>  x1
.
.
.
a63 xor b63 =>  x63

x0 || x1 || ... || x63   => x
!x  =>  Eq


4.11:
word Min3 = [
    A <= B && B <= C    : A;
    B <= C              : B;
    1                   : C;
];

4.12:
word Median = [
    A >= B && A <= C    : A;
    A >= C && A <= B    : A;
    B >= A && B <= C    : B;
    B >= C && B <= A    : B;
    1                   : C;
];

4.13:
            Generic                 Specific
Stage       irmovq V, rB            irmovq $128, %rsp
Fetch       icode :ifun ← M1[PC]    icode:ifun <- M1[PC]
            rA :rB ← M1[PC + 1]     rA:rB <- M1[PC + 1]
            valC ← M8[PC + 2]       $128 <- M8[PC + 2]
            valP ← PC + 10          valP <- PC + 10
Decode
Execute     valE ← 0 + valC         valE <- 0 + 128
Memory
Write back  R[rB] ← valE            %rsp <- 128
PC update   PC ← valP               PC <- valP

set %rsp to 128, add 10 to PC

4.14:
            Generic                 Specific
Stage       popq rA                 popq %rax
Fetch       icode :ifun ← M1[PC]    icode:ifun <- M1[0x02c] = b:0
            rA :rB ← M1[PC + 1]     rA:rB <- M1[0x02d] = 0:f
            valP ← PC + 2           valP <- 0x02e
Decode      valA ← R[%rsp]          valA <- R[%rsp] = 136
            valB ← R[%rsp]          valB <- R[%rsp] = 136
Execute     valE ← valB + 8         valE <- valB + 8 = 144
Memory      valM ← M8[valA]         valM <- M8[136] = 9
Write back  R[%rsp] ← valE          R[%rsp] <- valE = 144
            R[rA] ← valM            R[%rax] <- valM = 9
PC update   PC ← valP               PC <- valP = 0x02e

incremented %rsp with 8, poped the value of stack top to %rax,
incremented PC with 2.


Practice Problem 4.15:
push %rsp will put the value at %rsp to an 8 bytes space below the address of %rsp,
and decrement %rsp with 8.
this conform the desired behavior.

Practice Problem 4.16:
it will pop the value at stack top to the %rsp, overwrite the incremented value.
this conform the desired behavior.

Practice Problem 4.17:
Stage       cmovXX rA, rB
Fetch       icode :ifun ← M1[PC]
            rA :rB ← M1[PC + 1]
            valP ← PC + 2
Decode      valA ← R[rA]
Execute     Cnd ← Cond(CC, ifun)
            valE ← 0 + valA
Memory
Write back  if (Cnd) R[rB] ← valE
            
PC update   PC ← valP

Practice Problem 4.18:
            Generic                 Specific
Stage       call Dest               call 0x041
Fetch       icode :ifun ← M1[PC]    icode:ifun <- M1[0x37] = 8:0
            valC ← M8[PC + 1]       valC <- M8[0x37] = 0x41
            valP ← PC + 9           valP <- PC + 9 = 0x40
Decode
            valB ← R[%rsp]          valB <- R[%rsp] = 128
Execute     valE ← valB + (−8)      valE <- 128 + (-8) = 120
Memory      M8[valE] ← valP         M8[120] <- 0x40
Write back  R[%rsp] ← valE          R[%rsp] <- 120
PC update   PC ← valC               PC <- valC = 0x41

Practice Problem 4.19:
bool need_valC = icode in {IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL}

Practice Problem 4.20:
word srcB = [
    icode in {IRMMOVQ, IMRMOVQ, IOPQ} : rB;
    icode in {IPUSHQ, IPOPQ, ICALL, IRET} : RRSP;
    1 : RNONE;
];

4.21:
word dstM = [
    icode in {IMRMOVQ, IPOPQ} : rA;
    1 : RNONE;
];

4.22:
give higher-priority to dstM.

4.23:
word aluB = [
    icode in {IRRMOVQ, IIRMOVQ} : 0;
    icode in {IMRMOVQ, IRMMOVQ, IOPQ, ICALL, IRET, IPUSHQ, IPOPQ} : valB;
];

4.24:
word dstE = [
    icode in {IRRMOVQ} && Cnd : rB;
    .
    .
    .
];

4.25:
word mem_data = [
    icode in {IRMMOVQ, IPUSHQ} : valA;
    icode == ICALL : valP;
];

4.26:
bool mem_write = icode in {IRMMOVQ, IPUSHQ, ICALL};

4.27:
word Stat = [
    icode == IHALT : SHLT;
    imem_error || dmem_error : SADR;
    !instr_valid : SINS;
    1 : SAOK;
];

毫秒 1 ms = 1 * 10^-3 s
微秒 1 μs = 1 * 10^-6 s
纳秒 1 ns = 1 * 10^-9 s
皮秒 1 ps = 1 * 10^-12 s

4.28:
A:
insert into space between C and D;
Delay = 340ps
Throughput = 1/190ps * 1000 = 5.26 GIPS

B:
first register insert between B and C, 
second register insert between D and E;
Delay = 360ps
Throughput = 1/130ps * 1000 = 7.69 GIPS

C:
A | B C | D | E F |
Delay = 380ps
Throughput = 1/110ps * 100 = 9.09 GIPS

D:
5 stages;
A|B|C|D|E F|
Delay = 400ps
Throughput = 1/100ps * 100 = 10 GIPS

4.29:
A:
Delay = 300 + 20k ps
Throughput = 1000/(300/k + 20)
B:
the delay of register, maximum 50 GIPS


4.30:
word f_stat = [
    imem_error : SADR;
    !instr_valid : SINS;
    1 : SAOK;
];

4.31
word d_dstE = [
    icode in {IRRMOVQ, IIRMOVQ, IOPQ} : rB;
    icode in {IPUSHQ, IPOPQ} : RRSP;
    1 : RNONE;
];

4.32:
word d_valA = [
    D_icode in { ICALL, IJXX } : D_valP; # Use incremented PC
    d_srcA == e_dstE : e_valE; # Forward valE from execute
    d_srcA == M_dstM : m_valM; # Forward valM from memory
    d_srcA == M_dstE : M_valE; # Forward valE from memory
    d_srcA == W_dstM : W_valM; # Forward valM from write back
    d_srcA == W_dstE : W_valE; # Forward valE from write back
    1 : d_rvalA; # Use value read from register file
];

    because popq %rsp in line 4 set the M_dstE and M_dstM both to %rsp,
so the rrmovq %rsp, %rax will select the M_dstM as the forward field,
so rrmovq will get the value on the memory which pointed by stack pointer as it's value 
, rather than the value in %rsp.

4.33:
irmovq $100, %rsp
popq %rsp
nop
nop
rrmovq %rsp, %rax

4.34:
word d_valB = [
    d_srcB == e_dstE : e_valE; # Forward valE from execute
    d_srcB == M_dstM : m_valM; # Forward valM from memory
    d_srcB == M_dstE : M_valE; # Forward valE from memory
    d_srcB == W_dstM : W_valM; # Forward valM from write back
    d_srcB == W_dstE : W_valE; # Forward valE from write back
    1 : d_rvalB;
];

4.35:
irmovq $1234, %rdx
xorq %rcx, %rcx
cmovne %rdx, %rbx
rrmovq %rbx, %rax

e_dstE is the result of Execute Stage, 
E_dstE is the result computed by Decode Stage.
if there is condition move in execute stage, it will get incorrect result

4.36:
word m_stat = [
    dmem_error : SADR;
    1 : M_stat;
];


4.37:

    call func

    nop
    nop

func:
    irmovq $3, %rax
    irmovq $4, %rbx
    subq %rax, %rbx
    jg L1

    irmovq $0, %rax
    irmovq $0, %rbx
    ret
    halt

L1:
    ret

    irmovq $1, %rax
    halt

Combination A will be handled correctly by control logic.

4.38:

call func

nop
nop
halt

func:

pushq %rsp
popq %rsp
ret

halt

4.43:

mp 0.2 0.35 2 0.14
Total penalty 0.25
CPI = 1.25

movq $0, %rbx
movq $1, %rax

loop_start:
addq %rax, %rbx

addq $1, %rax

cmpq $1000, %rax
jle loop_end

jmp loop_start

loop_end:


cmpq $0, %rbx
jl less_than
je equal

movq $1, %rax
jmp branch_end

less_than:
movq $-1, %rax
jmp branch_end

equal:
movq $0, %rax

branch_end:

4.44:
A:
8 instructions for conditional branch
9 instructions for conditional move

B:
1 load/use bubble and 2 mispredict bubbles for  conditional branch
1 load/use bubble and 2 mispredict bubbles for  conditional move

C:
10 clock cycles required for conditional branch
11 clock cycles required for conditional move

4.45:
A:
no

B:
movq REG, -8(%rsp)
subp $8, %rsp

4.46:
A:
no

B:
addq $8, %rsp
movq -8(%rsp), REG

4.47:
A:
4.47.c

B:
4.47.s 4.47-Y86-64.s

4.48:
4.48-Y86-64.s


4.49:
4.49-Y86-64.s


4.50:
4.50.s


4.51:
iaddq V, rB
Fetch   icode:ifun <- M1[PC]
        f:rB <- M1[PC + 1]
        valC <- M8[PC + 2]
        valP <- PC + 10
Decode  valB <- R[rB]
Execute valE <- valB + valC
Memory
Write back  R[rB] <- valE
PC update   PC <- valP


4.52:
第四章的练习题4.52及之后的练习题 都没有时间做，以后再补做。



5.51:
*xp = 0 And *yp = 0

5.52:
60 +35n = 136 + 4n
31n = 76
n = 2.45

136 + 4n = 157 + 1.25n
2.75n = 21
n = 7.64

when n equal or less than 2, version 1 is fastest
when n equal or less than 7, version 2 is fastest
when n great than 7, version 3 is fastest


5.3:
A:  1   91  90  90
B:  91  1   90  90
C:  1   1   90  90

5.4:
A: 
IN O1 version, %xmm0 is read from *dest, and add vec elements to itself in
iterations.
IN O2 version, %xmm0 is just add vec elements to itself in iterations.

B:
optimized version implemented the C code of combine3.

C:
this optimization preserved the desired behavior. because it write to *dest and
immidiately read from *dest, so we can omit the read from *dest, replace it with
temperary variable.

5.5:
A:
n times additions and 2n times multiplications need to perform

B:
In our reference machine, the CPU have two float point muliplication function
units, so the two multiplication and addtion can be performed simultaneously

5.6:
A:
n times addtions and n times multiplications need to perform

B:
C:
because the addtion operation need the the result of multiplication as it's
oprand in every iteration, that means the addtion and multiplication operation can not
be executed simultaneously, so the CPE is Float point multiplication plus Float point
addtion is 5 + 3 = 8.

5.7:
solution in 5.7.c

5.8:
A1 : CPE=15/3=5
A2 : CPE=10/3=3.33
A3 : CPE=5/3=1.67
A4 : CPE=5/3=1.67
A5 : CPE=10/3=3.33

5.9:
solution in 5.9.c

5.10:
A: in every iteration, it read from next position and write the value to current
position, so the write operation of next iteration can execute after read
operation is executed.

B: in every iteration, it read from current position, and write the value to
next position, so the read position of next iteration can not been executed
until the current write operation is finished.

C: 
D: the read and write operations in each iteration is not connected, 
so theCPE is 0.5, because of there are only two load units.

5.11:
In every iteraion there are three operations in critical path load add and store,
the load operation need read from the address which is the write address of
previous iteration, so the read operation in every iteration must wait until the
write opreation of previous iteration finished. so the CPE equals the sum of
latency of load add and store, that's why it's CPE so high.

5.12
void psum1(float a[], float p[], long n)
{
    long i;
    float tmp;

    p[0] = a[0];
    tmp = p[0];
    for (i = 1; i < n; i++) {
        tmp += a[i];
        p[i] = tmp;
    }
}

5.13:
A:
critical path is formed by %xmm0, it have to add the product of two vector
element in every iteration. instruction vaddsd %xmm1, %xmm0, %xmm0 can not
be executed parallel over iteration.

B:
Latency bound
yes

C:
Latency bound

D:
the multiplication operations can be executed parallel, so multiplications can
execute pipelined or executed in multiple Float-point Multiplication units.
On the contrary, the addition must execute sequentially. so the CPE is equal to
addition latency.

5.14:
A:
because the add operation in critical path have to executed one by one
sequentially, and for any data type the minimum issue time is 1. so the CPE of can't less than 1

B:
same as question A, the add operations must executed sequentially, can not 
executed parallelly.


Chapter 6:

SRAM consisted of six transistor, persistent, non sisentivity, consume more
power, more expensive, faster
DRAM consisted of a capacitor and a transistor
    memory modules, 
DISK: platter surface track sector
SSD: block page

6.1:
Organization    r   c   br  bc  max(br, bc)
16 × 1          16  1   4   1   4
16 × 4          16  4   4   2   4
128 × 8         128 8   7   3   7
512 × 4         512 4   9   2   9
1,024 × 4       1024    4   10  2   10

6.2:
3 * 2 * 15000 * 500 * 1024 = 46.08 * 10^9 bytes = 46.08 GB

6.3:
Tavg seek = 5 ms
Tavg rotation = 1/2 * 60/12000 RPM * 1000 ms/sec = 2.5 ms
Tavg transfer = 60/12000 RPM * 1/300 sector/track * 1000 ms/sec ~= 0.017 ms

total = 5 + 2.5 = 7.5 ms

6.4:
Tavg seek = 6ms
Tavg rotation = 1/2 * 60/13000 RPM  * 1000 ms/sec ~= 2.3ms
Tavg transfer = 60/13000 RPM * 1/5000 sector/track * 1000 ms/sec

A: time = Tavg seek = 6ms
B: time = Tavg seek + Tavg rotation = 8.3ms

6.5
A: 128 * 10^15 bytes / 470 * 10^6 bytes / (3600 * 24 * 365)  ~= 9 years
B: 128 * 10^15 / 303 * 10^6 / (3600 * 24 * 365) ~= 13 years
C: 128 * 10^15 / 20 * 10^9 / 365 ~= 17534 years

6.6:
about at year 2025

6.7:
modify the code of line 8 to:  product *= a[i][j][k];

6.8:
b > c > d

6.12:
CT CT CT CT CT CT CT CT CI CI CI CO CO

6.13:
A:
0 1 1 0 1 0 1 0 1 0 0 1 1
B:
0x3
0x4
0x6A
N
0x--

6.14:
A:
0 1 1 0 0 1 0 1 1 0 1 0 0
B:
0x0
0x5
0x65
N
0x--

6.15:
A:
0 1 0 1 0 0 0 1 1 0 0 0 1
B:
0x1
0x4
0x51
N
0x--

6.16:
0x064C, 0x064D, 0x064E, 0x064F

6.17:
A:
dst
m   m
m   m

src
m   m
m   h

B:
dst
m   h
m   h

src
m   h
m   h

6.18:
A: 2048
B: 512
C: 8/32 = 0.25

6.19:
A: 2048
B: 1024
C: 1024/2048 = 0.5
D: 1024

6.20:
A: 2048
B: 1536
C: 3/4 = 0.75
D: 0.75

Chapter 7:

7.1:
buf     Y   external    m.o     .data
bufp0   Y   global      swap.o  .data
bufp1   Y   global      swap.o  COMMON
swap    Y   global      swap.o  .text
temp    N   -           -       STACK

7.2:
A:
a: main.1
b: main.1

B:
a: ERROR
b: ERROR

C:
a: x.2
B: x.2

7.3:
A: gcc -static p.o libx.a
B: gcc -static p.o libx.a liby.a
C: gcc -static p.o libx.a liby.a libx.a

7.4:
A: 0x4004df
B: 0x5

7.5:
 ADDR(r.symbol) + r.addend - (ADDR(s) + r.offset)
=0x4004e8 + (-0x4) - (0x4004d0 + 0xa)
=0xa

Chapter 8

8.1:
AB Y
AC N
BC Y

8.2:
A:
p1: a=9
p2: a=8

B:
p2: a=9

8.3:
903636
936036
930636
093636

8.4:
A:
7 output lines

B:
Start
1
Child
Stop
0
2
Stop

8.5:
unsigned int wakeup(unsigned int secs)
{
    unsigned int remain = sleep(secs);
    if (remain > 0) {
        printf("Woke up at %d secs.\n", secs - remain);
    }
    return remain;
}

8.8:
213

8.9:
AB N
AC Y
AD Y
BC Y
BD Y
CD Y

8.10:
A. Called once, returns only if there is an error
    execve

B. Called once, returns nothing

C. Called once, returns either a pointer or NULL
    getenv

8.11:
8 times

8.12:
10 times

8.13:
a=4
a=5
a=6

8.14:
4 times

8.15:
9 times

8.16:
counter=2

8.17
Totally 14 different patterns of output lines

8.18:
A C E

8.19:
8 lines

8.21:
abc
bac

8.23:
After first SIGUSR2 signal arrived parent process, parent received 
the signal, called the handler and the system blocked signal 
of type SIGUSR2, meanwhile the other four signal behind arrived
parent and not queued, only the second SIGUSR2 signal recorded.




2021-03-09 看到295页
2021-03-19 看到301页
2021-03-20 看到312页
2021-03-21 看到328页
2021-03-24 看到333页
2021-04-01 看到342页
2021-04-02 看到348页
2021-04-07 看到350页
2021-04-08 看到358页
2021-04-09 看到361页
2021-04-11 看到362页
2021-04-16 看到397页
2021-04-18 看到407页
2021-04-19 看到421页
2021-04-20 看到441页
2021-04-21 看到447页
2021-04-22 看到451页
2021-04-23 看到473页
2021-04-24 看到481页
2021-04-26 看到490页
2021-04-27 看到492页
2021-04-27 看到495页
2021-05-06 看到500页
2021-05-07 看到505页
2021-05-17 看到510页
2021-05-31 看到560页
2021-06-04 看到565页
2021-06-17 看到585页
2021-06-22 看到598页
2021-06-24 看到604页
2021-06-25 看到607页
2021-08-16 看到645页
2021-08-25 看到667页
2021-08-26 看到676页
2021-09-02 看到721页
2021-09-27 看到725页
2021-09-27 看到734页
2021-10-20 看到751页
2021-10-25 看到800页

第四章和第五章的最后部分需要重新再读一遍
第七章的家庭作业题目 没有做

