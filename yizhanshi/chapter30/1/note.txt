每个进程在内核中都有一个进程控制块（PCB)维护进程信息
    pid
    status
    CPU寄存器
    描述地址空间的信息
    描述控制终端的信息
    当前工作目录（Current Working Directory）
    umask掩码
    文件描述符表，包含很多指向file结构体的指针
    和信号相关的信息
    用户id和组id
    控制终端、Session和进程组
    进程可以使用的资源上限（Resource Limit）


fork和exec时两个重要的系统调用

    fork的作用是根据一个现有的进程复制出一个新的进程，原来的进程称为父进程（Parent
Process），新的进程称为子进程（Child
Process）。系统中同时运行着很多进程，这些进程都是从最初只有一个进程开始一个一个复制出来的。
在Shell写输入命令可以运行一个程序，是因为Shell进程在读取用户输入的命令之后会调用fork复制出一个新的Shell进程，然后新的Shell进程调用exec执行新的程序。

    一个程序可以多次加载到内存，成为同时运行的多个进程，例如可以同时开多个终端窗口运行/bin/bash，另一方面，一个进程在调用exec前后也可以分别执行两个不同的程序，例如在Shell提示符下输入命令ls，首先fork创建子进程，这时子进程仍在执行/bin/bash程序，然后子进程调用exec执行新的程序/bin/ls

    1. /bin/bash (Parent) ->(fork) /bin/bash (Child) ->(exec) /bin/ls (Child)
    2. /bin/bash (Parent)

子进程的PCB是根据父进程复制而来的，所以其中的umask掩码也和父进程一样。同理，子进程的当前工作目录也和父进程一样，所以我们可以用cd命令改变Shell进程的当前目录，然后用ls命令列出那个目录下的文件，ls进程其实是在列出自己的当前目录，而不是Shell进程的当前目录，只不过ls进程的当前目录正好和Shell进程相同。有一个例外，子进程PCB中的进程id和父进程是不同的。
